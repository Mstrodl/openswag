buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.3'
    }
}
plugins {
  id "com.matthewprenger.cursegradle" version "1.0.7"
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.


def getGitRef() {
  try {
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'rev-parse', '--short', 'HEAD'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  } catch (Throwable e) {
    return "unknown"
  }
}

if (System.getenv("PROMOTED_NUMBER") != null)
    buildNumber = "${System.getenv("PROMOTED_NUMBER")}"
else if (System.getenv("BUILD_NUMBER") != null)
    buildNumber = "${System.getenv("BUILD_NUMBER")}"
else
    buildNumber = "+" + getGitRef()

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}


version = modVersion
group = modGroup
archivesBaseName = modBaseName

minecraft {
    version = "${minecraftVersion}-${forge_version}"
    runDir = "run"
    mappings = mcp_mappings
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace "@VERSION@", project.version
	replace "@BUILD@", project.buildNumber
}

repositories {
    maven {
        name = "OpenComputers"
        url = "http://maven.cil.li/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    deobfCompile "li.cil.oc:OpenComputers:${openComputersVersion}"
    //compile files("../OpenComputers/build/libs/OpenComputers-${openComputersVersion}${openComputersHash}.jar")

    compile fileTree(include: ['*.jar'], dir: 'libs')
}

if (project.hasProperty('curseforge_key')) {
	curseforge_key = project.curseforge_key
	curse_changelog = project.promochangelog
}

curseforge {
	apiKey = curseforge_key
	project {
		id = curse_projectId
		releaseType = curse_releaseType
		changelog = file('changelog.txt')
	}
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version + "-" + project.buildNumber, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = buildNumber

    manifest { attributes(
            'FMLCorePluginContainsFMLMod': 'icanhazfmlmodpweeze',
    ) }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.allJava
    classifier = 'dev'
}

artifacts {
    archives devJar
}

